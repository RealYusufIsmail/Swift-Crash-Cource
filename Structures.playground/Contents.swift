import Foundation

// Structures are value types. People prefer this to class as the constructer is generated by the compiler.

struct Person {
    let name : String
    let age : Int
}

let foo = Person(name: "Foo", age: 20)

foo.name
foo.age

struct CommodoreComputer {
    let name : String
    let manufacturer : String
    
    init(_ name: String) {
        /// this.name
        self.name = name
        self.manufacturer = "Commodore"
    }
}

let c64 = CommodoreComputer("C64")

struct PersonTwo {
    let firstName : String
    let lastName : String
    
    /// Need to do this so its valid
    var fullName : String {
        "\(firstName) \(lastName)"
    }
}

let fooBar = PersonTwo(firstName: "Foo", lastName: "Bar")

fooBar.fullName


struct Car {
    var currentSpeed : Int
    
    /// Alows currentSpeed to be changed. Basically making struct mutable
    mutating func drive(_ speed : Int) {
        "Driving..."
        currentSpeed = speed
    }
}

let immutableCar = Car(currentSpeed: 10)

//immutableCar.drive(10)

var mutableCar = Car(currentSpeed: 20)

/// Retains rhe values from the time it was copied. Does not change if the original changes after.
let copy = mutableCar

mutableCar.drive(30)

mutableCar.currentSpeed

copy.currentSpeed

// Structure can not inherite other structures.

struct Bike {
    let manufacture : String
    let currentSpeed : Int
    func copy(_ currentSpeed : Int) -> Bike {
        Bike(self.manufacture, currentSpeed)
    }
    
    init(_ manufacture: String, _ currentSpeed: Int) {
        self.manufacture = manufacture
        self.currentSpeed = currentSpeed
    }
}

let bike1 = Bike("HD", 20)

var bike2 = bike1.copy(30)

bike2.currentSpeed

